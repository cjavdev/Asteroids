{"version":3,"sources":["util.js","moving_object.js","asteroid.js","ship.js","bullet.js","game.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChfile":"all.js","sourcesContent":["/*global AG, window */\n'use strict';\n\n(function () {\n  if (window.AG === undefined) {\n    window.AG = {};\n  }\n\n  if (window.AG.Util === undefined) {\n    AG.Util = {\n      canvasMaxX: 500,\n      canvasMaxY: 500\n    };\n  }\n\n  AG.Util.randomBetween = function (min, max) {\n    return Math.floor(Math.random() * (max + 1 - min) + min);\n  };\n}());\n","/*global AG, window */\n'use strict';\n\n(function () {\n  if (window.AG === undefined) {\n    window.AG = {};\n  }\n\n  class MovingObject {\n    constructor(position) {\n      this.x = position.x;\n      this.y = position.y;\n    }\n\n    wrap() {\n      if (this.x > AG.canvasMaxX) {\n        this.x = 0;\n      } else if (this.y > AG.canvasMaxY) {\n        this.y = 0;\n      } else if (this.x < 1) {\n        this.x = AG.canvasMaxX;\n      } else if (this.y < 1) {\n        this.y = AG.canvasMaxY;\n      }\n    }\n\n    update(velocity) {\n      this.x += velocity.x;\n      this.y += velocity.y;\n    }\n\n    offScreen() {\n      return this.x > AG.canvasMaxX || this.y > AG.canvasMaxY || this.x < 0 || this.y < 0;\n    }\n\n    draw(ctx) {\n      ctx.beginPath();\n      ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n      ctx.fillStyle = this.color;\n      ctx.fill();\n    }\n\n    colidedWith(other) {\n      var distance, xSquared, ySquared;\n      xSquared = Math.pow((other.x - this.x), 2);\n      ySquared = Math.pow((other.y - this.y), 2);\n      distance = Math.sqrt(xSquared + ySquared);\n      if (distance < (other.radius + this.radius)) {\n        return true;\n      }\n      return false;\n    }\n  }\n  AG.MovingObject = MovingObject;\n}());\n","/*globals window, AG */\n'use strict';\n\n(function () {\n  if (window.AG === undefined) {\n    window.AG = {};\n  }\n\n  class Asteroid extends AG.MovingObject {\n    constructor(position, radius, direction) {\n      this.radius = radius;\n      this.direction = direction;\n      this.color = 'grey';\n\n      super(position);\n    }\n\n    update () {\n      super.update(this.direction);\n    }\n\n    isHit(bullets) {\n      var i;\n\n      for (i = 0; i < bullets.length; i++) {\n        if(this.colidedWith(bullets[i])) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }\n\n  Asteroid.randomAsteroid = function () {\n    var position = {\n      x: Math.floor(Math.random() * AG.canvasMaxX + 1),\n      y: Math.floor(Math.random() * AG.canvasMaxX + 1),\n    };\n    var direction = {\n      x: AG.Util.randomBetween(-10, 10),\n      y: AG.Util.randomBetween(-10, 10)\n    };\n    return new Asteroid(position, AG.Util.randomBetween(5, 25), direction);\n  };\n\n  AG.Asteroid = Asteroid;\n}());\n","/*globals window, AG, Image */\n\n(function () {\n  if (window.AG === undefined) {\n    window.AG = {};\n  }\n\n  class Ship extends AG.MovingObject {\n    constructor(position, height, width, imgPath) {\n      this.height = height;\n      this.width = width;\n      this.velocity = {\n        x: 0,\n        y: 0\n      };\n      this.installImage(imgPath);\n\n      super(position);\n    }\n\n    center() {\n      return {\n        x: (this.x + this.height / 2),\n        y: (this.y + this.width / 2)\n      };\n    }\n\n    draw(ctx) {\n      ctx.beginPath();\n      ctx.drawImage(this.image, this.x, this.y, this.height, this.width);\n    }\n\n    installImage(path) {\n      this.image = new Image();\n      if(path === undefined) {\n        this.image.src = \"img/spaceship.png\";\n      } else {\n        this.image.src = path;\n      }\n    }\n\n    isHit(asteroids) {\n      var i, distance, xSquared, ySquared;\n      for (i = 0; i < asteroids.length; i++) {\n        xSquared = Math.pow((asteroids[i].x - this.center().x), 2);\n        ySquared = Math.pow((asteroids[i].y - this.center().y), 2);\n        distance = Math.sqrt(xSquared + ySquared);\n        if (distance < (asteroids[i].radius + this.height / 2)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    update() {\n      this.x += this.velocity.x;\n      this.y += this.velocity.y;\n\n      if (this.velocity.x !== 0) {\n        this.velocity.x < 0 ? this.velocity.x++ : this.velocity.x--;\n      }\n      if (this.velocity.y !== 0) {\n        this.velocity.y < 0 ? this.velocity.y++ : this.velocity.y--;\n      }\n    }\n\n    power(dx, dy) {\n      if (this.velocity.x + dx >= -10 && this.velocity.x + dx <= 10) {\n        this.velocity.x += dx;\n      }\n      if (this.velocity.y + dy >= -10 && this.velocity.y + dy <= 10) {\n        this.velocity.y += dy;\n      }\n    }\n\n    fireBullet(game) {\n      var bullet = new AG.Bullet({\n        x: this.center().x,\n        y: this.center().y\n      }, {\n        x: this.velocity.x,\n        y: this.velocity.y\n      }, 3, 2, game);\n    }\n  }\n\n  AG.Ship = Ship;\n}());\n","/*globals window, AG */\n'use strict';\n\n(function () {\n  if (window.AG === undefined) {\n    window.AG = {};\n  }\n\n  class Bullet extends AG.MovingObject {\n    constructor(position, direction, speed, radius, game) {\n      this.direction = direction;\n      this.speed = speed;\n      this.radius = radius;\n      this.color = 'red';\n\n      game.bullets.push(this);\n      super(position);\n    }\n\n    update() {\n      var x = this.direction.x;\n      var y = this.direction.y;\n\n      while (x === 0 && y === 0) {\n        this.direction.y = Math.floor(Math.random() * (2 + 1) - 1);\n        this.direction.x = Math.floor(Math.random() * (2 + 1) - 1);\n        x = this.direction.x;\n        y = this.direction.y;\n      }\n\n      this.x += x * this.speed;\n      this.y += y * this.speed;\n    }\n  }\n\n  AG.Bullet = Bullet;\n}());\n","/*globals window, AG */\n\n(function () {\n  if (window.AG === undefined) {\n    window.AG = {};\n  }\n\n  class Game {\n    constructor(context) {\n      this.context = context;\n      this.asteroids = [];\n      this.bullets = [];\n\n      AG.canvasMaxX = context.canvas.width;\n      AG.canvasMaxY = context.canvas.height;\n\n      this.ship = new AG.Ship({\n        x: (AG.canvasMaxX / 2),\n        y: (AG.canvasMaxY / 2)\n      }, 50, 50);\n\n      for (var i = 0; i < 10; i++) {\n        this.asteroids.push(AG.Asteroid.randomAsteroid());\n      }\n    }\n\n    draw() {\n      this.ship.draw(this.context);\n\n      for (var i = 0; i < this.asteroids.length; i++) {\n        this.asteroids[i].draw(this.context);\n      }\n\n      for (var i = 0; i < this.bullets.length; i++) {\n        this.bullets[i].draw(this.context);\n      }\n    }\n\n    update() {\n      for (var i = 0; i < this.asteroids.length; i++) {\n        if (this.asteroids[i].offScreen()) {\n          this.asteroids[i].wrap();\n        } else if (this.asteroids[i].isHit(this.bullets)) {\n          var ast = this.asteroids[i];\n          console.log(ast);\n          if (ast.radius > 10) {\n            this.asteroids.push(new AG.Asteroid({\n              x: ast.x,\n              y: ast.y\n            }, ast.radius / 2, {\n              x: AG.Util.randomBetween(-10, 10),\n              y: AG.Util.randomBetween(-10, 10)\n            }));\n            this.asteroids.push(new AG.Asteroid({\n              x: ast.x,\n              y: ast.y\n            }, ast.radius / 2, {\n              x: AG.Util.randomBetween(-10, 10),\n              y: AG.Util.randomBetween(-10, 10)\n            }));\n          }\n\n          this.asteroids.splice(i, 1);\n        } else {\n          this.asteroids[i].update();\n        }\n      }\n\n      for (var i = 0; i < this.bullets.length; i++) {\n        if (this.bullets[i].offScreen()) {\n          this.bullets.splice(i, 1);\n        } else {\n          this.bullets[i].update();\n        }\n      }\n\n      this.ship.update();\n    }\n\n    start() {\n      var that = this;\n      var timer = setInterval(function () {\n        that.context.clearRect(0, 0, AG.canvasMaxX, AG.canvasMaxY);\n        that.update();\n        if (that.ship.offScreen()) {\n          that.ship.wrap();\n        }\n        if (that.ship.isHit(that.asteroids)) {\n          alert(\"BOOM!\");\n          clearInterval(timer);\n        }\n        that.draw();\n      }, 100);\n    }\n  }\n\n  AG.Game = Game;\n}());\n"],"sourceRoot":"/source/"}